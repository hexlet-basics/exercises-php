---

name: Вызов функции — выражение
theory: |

  Выражение — это код, который при выполнении программы **вычисляется** в значение.

  Какие из этих фрагментов кода являются выражениями?

  1. `42`
  2. `10 * 45`
  3. `"Kings" . "road"`
  4. `calculateDistance('Lannisport', 'Bayasabhad')`

  Числа и математические операции — наверное, самые простые варианты. Выражение `42` превратится в значение `42`, выражение `10 * 45` — в значение `450`.

  Конкатенация строк — тоже выражение, которое превратится в соответствующее значение (новую строку).

  Но вот четвёртый вариант — тоже выражение! Мощность и гибкость языка программирования во многом возможна благодаря тому, что **вызов функции — это выражение**.

  Посмотрите на пример:

  ```php
  <?php

  $distance = calculateDistance('Lannisport', 'Bayasabhad');
  ```

  В переменную `$distance` записывается результат вычисления выражения. В отличие от операций (например, `10 + 12`), где явно видно, какое вычисление производится, в функциях само вычисление скрыто от нас, и мы видим только результат. Поэтому говорят, что функция «возвращает» значение. Можно применить эту терминологию и к обычным операциям. Например, сказать, что конкатенация двух строк возвращает новую строку.

  *Что является выражением, а что нет?* Сейчас может казаться, что это одна из скучных деталей из учебника по программированию. Но это действительно важный вопрос. Всё, что работает как выражение, может быть использовано в других выражениях, а также во всех местах, где на вход ожидаются выражения. Распознавать выражения в коде — важный навык, необходимый программисту каждый день.

  Допустим, у нас есть функция `numberOfKnights()`, которая принимает название замка в королевстве и возвращает количество рыцарей в этом замке. Зная, что _вызов функции — выражение_, можно допустить, что такой код будет работать:

  ```php
  <?php

  $result = 4 + numberOfKnights("Winterfell");
  ```

  Почему? Сложение — это выражение, а значит его операндами могут быть другие выражения: выражения `4` и выражения `numberOfKnights('Winterfell')`. В итоге получится _4 + какое-то число_.

  Значит, и такой код будет работать:

  ```php
  <?php

  $result = numberOfKnights("Winterfell") + numberOfKnights("Oldtown");
  ```

  Здесь два разных вызова функций, но каждый вызов — выражение, поэтому в итоге получится сложение двух значений — двух чисел (количества рыцарей замка Winterfell и количества рыцарей замка Oldtown).

  Как вы увидите в следующих уроках, выражения могут комбинироваться друг с другом в самых причудливых формах. Умея распознавать выражения, вы сможете самостоятельно придумывать новые варианты использования, даже никогда не видев их до этого. В этом и заключается секрет изучения программирования, вместо заучивания конкретных способов работы, мы изучаем принципы по которым работает код.

instructions: |

  Выведите на экран первую и последнюю буквы предложения, записанного в переменную `text`, в следующем формате:

  <pre class='hexlet-basics-output'>
  First: N
  Last: t
  </pre>

  Постарайтесь создать только одну переменную, в которую сразу запишется нужный текст перед печатью на экран. В этом уроке мы отрабатываем умение собирать составное выражение.

tips: []
