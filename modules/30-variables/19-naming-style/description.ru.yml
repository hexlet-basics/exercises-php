---

name: Именование переменных
theory: |

  `$greeting` — пример простого имени, но не все имена так просты. Довольно часто они составные, то есть включают в себя несколько слов. Например, «имя пользователя». В разных языках применяются разные стили кодирования, и имя переменной будет отличаться.

  В именовании переменных можно выделить три основных подхода, которые иногда комбинируют друг с другом. Все эти подходы проявляют себя, когда имя переменной состоит из нескольких слов:

  * kebab-case — составные части переменной разделяются дефисом. Например: `my-super-var`.
  * snake_case — для разделения используется подчеркивание. Например: `my_super_var`.
  * CamelCase  — каждое слово в переменной пишется с заглавной буквы. Например: `MySuperVar`.
  * lowerCamelCase — каждое слово в переменной пишется с заглавной буквы, кроме первого. Например: `mySuperVar`.

  В PHP используется CamelCase и его вариация lowerCamelCase, при котором первая буква первого слова — строчная. Именно lowerCamelCase применяется для переменных. Это значит, что имена соединяются друг с другом, при этом все имена кроме первого становятся с заглавной буквы: `$userName`. С тремя словами это выглядит так: `$mySuperVariable`.

  Другое общепринятое правило гласит: не используйте транслит для имён, только английский язык. Если вы испытываете сложности с английским, то пользуйтесь переводчиком. Со временем, копаясь в чужом коде, вы сформируете правильные понятия для именования.

  Названия должны не только передавать смысл, но и соответствовать синтаксическим правилам, которые обычно никак не проверяются на уровне языка, но нужны во время разработки. Процесс написания программ в современном мире — коллективная работа, и для лучшего взаимодействия в команде код пишется в едином стиле, как если бы над ним работал один человек. В каждом языке свои правила. В PHP долгое время творился хаос. Да и сам язык соткан из противоречий, причём не только в названиях. С этим вы столкнетесь и в следующих уроках, и в реальной работе. Относительно недавно в PHP появился общепринятый [стандарт кодирования](https://www.php-fig.org/psr/psr-1/), к которому все так или иначе стремятся. Подобные стандарты описывают множество аспектов. Советуем с самого начала завести привычку заглядывать в стандарт и писать код в соответствии с ним.

  К счастью, сегодня не нужно помнить все правила из стандарта, потому что существуют специальные программы, которые проверяют код автоматически и сообщают о нарушениях. Такие программы называются **линтерами**, и вы начнёте их использовать немного позже, когда у вас появится чуть больше опыта.

instructions: |

  Создайте две переменные с именами «первое число» и «второе число» на английском языке, используя lowerCamelCase. Запишите в первую переменную число `1.10`, во вторую — `-100`. Выведите на экран произведение чисел, записанных в получившиеся переменные.

  Код будет работать с любыми названиями, а наша система всегда проверяет только результат на экране, поэтому выполнение этого задания — под вашу ответственность.

tips: []

definitions:
  - name: Стандарт кодирования
    description: набор синтакстических и стилистических правил написания кода.
