---

name: Параметры функций
theory: |

  Функции могут не только возвращать значения, но и принимать их в виде параметров. С параметрами функций мы уже сталкивались много раз:

  ```php
  <?php

  // Принимает на вход один параметр любого типа
  print_r('я параметр');
  // Принимает на вход два числовых параметра
  // первый - округляемое число,
  // второй - число знаков после запятой, которые нужно оставить
  round(10.1245, 3); // 10.125
  // Принимает на вход три строковых параметра
  // первый - что ищем, второй - на что меняем
  // третий - строка, в которой производим замену
  str_replace('go', 'mo', 'google'); // 'moogle'
  ```

  В этом уроке, мы научимся создавать функции, которые принимают на вход параметры. Представим, что перед нами стоит задача – реализовать функцию `getLastChar()`, возвращающую последний символ в строке, переданной ей на вход как параметр. Вот как будет выглядеть использование этой функции:

  ```php
  <?php

  // Передача параметров напрямую без переменных
  getLastChar('Hexlet'); // 't'

  // Передача параметров через переменные
  $name1 = 'Hexlet';
  getLastChar($name1); // 't'
  $name2 = 'Goo';
  getLastChar($name2); // 'o'
  ```

  Из описания и примеров кода мы можем сделать следующие выводы:

  * Нам нужно определить функцию `getLastChar()`
  * Функция должна принимать на вход один параметр строкового типа
  * Функция должна возвращать значение строкового типа

  Определение функции:

  ```php
  <?php

  function getLastChar($str)
  {
      // Вычисляем индекс последнего символа как длина строки - 1
      return $str[strlen($str) - 1];
  }
  ```

  Разберем его. В скобках указывается имя параметра (`$str`). Так как внутри функции мы не знаем, с каким конкретно значением идет работа, то параметры всегда описываются как переменные. Имя параметра может быть любым, оно не связано с тем, как вызывается функция. Главное, чтобы это имя отражало смысл того значения, которое содержится внутри. Конкретное значение параметра будет зависеть от вызова этой функции.

  Этот параметр является обязательным. Если попробовать вызвать функцию без параметра, то интерпретатор выдаст ошибку:

  ```sh
  getLastChar(); // такой код не имеет смысла
  ArgumentCountError: Too few arguments to function getLastChar(), 0 passed
  ```

  Точно таким же образом можно указывать два, три и более параметров. Каждый параметр отделяется от другого запятой.

  ```php
  <?php

  // функция по нахождению среднего числа
  function average($x, $y)
  {
      return ($x + $y) / 2;
  }

  average(1, 5); // 3
  average(1, 2); // 1.5
  ```

instructions: |

  Реализуйте функцию `truncate()`, которая обрезает переданную в функцию строку до указанного количества символов, добавляет в конце троеточие и возвращает получившуюся строку. Подобная логика часто используется на сайтах, чтобы отобразить длинный текст в сокращенном виде. Параметры функции:

  1. Строка, которую нужно обрезать
  2. Число символов, которые нужно оставить

  ```php
  // Передаём текст напрямую
  // Обрезаем до двух символов
  truncate('hexlet', 2)  // 'he...'

  // Через переменную
  $text = 'it works!'
  // Обрезаем до четырёх символов
  $result = truncate($text, 4);
  print_r($result); // => 'it w...'
  ```

  В этой задаче вам нужно взять подстроку из строки, переданной первым параметром. Для этого вам понадобится функция [substr()](https://www.php.net/manual/ru/function.substr.php). Подумайте исходя из задания, с какого индекса и какой длины вам надо извлечь подстроку?
