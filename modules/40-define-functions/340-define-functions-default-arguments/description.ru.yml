---

name: Параметры по умолчанию
theory: |

  Напомним, что аргумент может быть **необязательным**. У такого аргумента есть **значение по умолчанию**.

  Например, функция `getParentFor()`, которую вы использовали в некоторых упражнениях, принимает имя ребёнка первым аргументом, а вторым — строку `mother` или `father`. Второй аргумент — необязательный, и если не указывать его, то автоматически по умолчанию будет использоваться `mother`.

  Эти два вызова равнозначны:

  ```php
  <?php

  getParentFor('Jon Snow');
  getParentFor('Jon Snow', 'mother');
  ```

  Каким образом там сделаны аргументы по умолчанию? Давайте заглянем в определение этой функции:

  ```php
  <?php

  function getParentFor($child, $parent = 'mother')
  {
      // какой-то код
  }
  ```

  Первый аргумент указан привычно — просто название переменной. Это делает аргумент *обязательным*.

  Второй аргумент указан со значением в формате `$аргумент = какое_то_значение`. Точно так же, как при создании переменной. Этот фрагмент `= какое_то_значение` делает аргумент *необязательным*, и задаёт ему *значение по умолчанию*.

  Аргументов по умолчанию может быть любое количество, но все они должны быть в конце списка аргументов. То есть такие строчки кода синтаксически некорректны:

  - `function getParentFor($childName = 'Jon', $who)`
  - `function calculate($a, $b = 90, $c)`
  - `function getPrices($code = 4161, $quantity, $place)`

instructions: |

  Реализуйте функцию `getHiddenCard()`, который принимает на вход номер кредитки (состоящий из 16 цифр) в виде строки и возвращает его скрытую версию, которая может использоваться на сайте для отображения. Если исходная карта имела номер *2034399002125581*,  то скрытая версия выглядит так *\*\*\*\*5581*. Другими словами, функция заменяет первые 12 символов, на звездочки. Количество звездочек регулируется вторым необязательным параметром. Значение по умолчанию — 4.

  ```php
  <?php

  // Кредитка передается внутрь как строка
  getHiddenCard("1234567812345678", 2); // "**5678"
  getHiddenCard("1234567812345678", 3); // "***5678"
  getHiddenCard('1234567812345678'); // "****5678"
  getHiddenCard('2034399002121100', 1); // "*1100"
  ```

  Для выполнения задания вам понадобится функция [str_repeat()](https://www.php.net/manual/ru/function.str-repeat.php), которая повторяет строку указанное количество раз

  ```javascript
  str_repeat('+', 5); // "+++++"
  str_repeat('o', 3); // "ooo"
  ```
